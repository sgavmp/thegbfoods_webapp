options  {
  STATIC=false;
  UNICODE_INPUT=true;
}  
PARSER_BEGIN(QueryConstructor)
package es.ucm.visavet.gbf.topics.queryconstructor;
import org.apache.lucene.search.Query;
import java.io.InputStream;
public class QueryConstructor {
    private QueryConstructorSemantics sem;
    public QueryConstructor(QueryConstructorSemantics sem, InputStream input) {
	  this(input);
	  this.sem = sem;
	}
  }  
PARSER_END(QueryConstructor)
  TOKEN:{<TERM: <WORD>|"'"(~["'"])+"'">}
  TOKEN:{<LITERAL_TERM: "\""(~["\""])+"\"">}
  TOKEN:{<TOPIC_NAME: "#"<WORD>>}
  TOKEN:{<AND: "&">}
  TOKEN:{<OR:  "|">}
  TOKEN:{<DIF: "-">}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  TOKEN:{<#LETTER:["a"-"z"]|["A"-"Z"]|["á","é","í","ó","ú","Á","É","Í","Ó","Ú","ñ","Ñ","Ü","ü"]>}
  TOKEN:{<#DIGIT:["0"-"9"]>}
  TOKEN:{<#WORD:(<LETTER>|<DIGIT>)+>}
  
  Query topic():  {Query q;} {q=topic0() <EOF> {return q;}}
  Query topic0(): {Query q1,q2;} {q1=topic1() ((<OR>)? q2=topic1() {q1=sem.buildOrQuery(q1,q2);})* {return q1;}}
  Query topic1(): {Query q1,q2;} {q1=topic2() (<AND> q2=topic2() {q1=sem.buildAndQuery(q1,q2);})* {return q1;}}
  Query topic2(): {Query q1,q2;} {q1=topic3() (<DIF> q2=topic3() {q1=sem.buildDifQuery(q1,q2);})* {return q1;}}
  Query topic3(): {Token tk; Query q;} 
                    {tk=<TERM>   {return sem.buildTermQuery(tk.image);}                     | 
                     tk=<LITERAL_TERM>  {return sem.buildLiteralTermQuery(tk.image);}       | 
                     tk= <TOPIC_NAME> {return sem.buildTopicRefQuery(tk.image);} | 
		     "(" q=topic0() ")"  {return q;} } 
  


   
   
      

      
  
 
