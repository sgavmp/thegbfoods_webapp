options  {
  STATIC=false;
  UNICODE_INPUT=true;
}  
PARSER_BEGIN(TopicValidator)
package es.ucm.visavet.gbf.topics.validator;
import java.io.InputStream;
public class TopicValidator {
    private TopicValidatorSemantics sem;
    public TopicValidator(TopicValidatorSemantics sem, InputStream input) {
	  this(input);
	  this.sem = sem;
	}
  }  
PARSER_END(TopicValidator)
  TOKEN:{<TERM: <WORD>|"'"(~["'"])+"'">}
  TOKEN:{<LITERAL_TERM: "\""(~["\""])+"\"">}
  TOKEN:{<TOPIC_NAME: "#"<WORD>>}
  TOKEN:{<AND: "&">}
  TOKEN:{<OR:  "|">}
  TOKEN:{<DIF: "-">}
  TOKEN:{<ATTYPE: "@T"<WORD>>}
  TOKEN:{<ATLOC: "@L"<WORD>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  TOKEN:{<#LETTER:["a"-"z"]|["A"-"Z"]|["á","é","í","ó","ú","Á","É","Í","Ó","Ú","ñ","Ñ","Ü","ü"]>}
  TOKEN:{<#DIGIT:["0"-"9"]>}
  TOKEN:{<#WORD:(<LETTER>|<DIGIT>)+>}
  
  void topic():  {} {topic0() <EOF> }
  void topic0(): {} {topic1() ((<OR>)? topic1())* }
  void topic1(): {} {topic2() (<AND> topic2())* }
  void topic2(): {} {topic3() (<DIF> topic3())* }
  void topic3(): {Token tk;} 
                    {<TERM>         | 
                     <LITERAL_TERM> |
                     tk= <ATTYPE>   {sem.validateSourceType(tk.image);}          |
                     tk=<ATLOC>        {sem.validateSourceLocation(tk.image);}      | 					 
                     tk= <TOPIC_NAME>  {sem.validateReferenceToTopic(tk.image);} | 
		     "(" topic0() ")" } 
  


   
   
      

      
  
 
